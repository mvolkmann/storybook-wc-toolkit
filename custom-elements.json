{
  "schemaVersion": "1.0.0",
  "readme": "",
  "modules": [
    {
      "kind": "javascript-module",
      "path": "src/hello-world.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "This is a simple web component that renders a greeting message.",
          "name": "HelloWorld",
          "members": [
            {
              "kind": "field",
              "name": "span",
              "type": {
                "text": "HTMLSpanElement | undefined | null"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "name"
            }
          ],
          "attributes": [
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "description": "The name of the person to greet",
              "default": "\"World\""
            }
          ],
          "superclass": {
            "name": "HTMLElement"
          },
          "tagName": "hello-world",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "HelloWorld",
          "declaration": {
            "name": "HelloWorld",
            "module": "src/hello-world.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "hello-world",
          "declaration": {
            "name": "HelloWorld",
            "module": "src/hello-world.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/my-page.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "This is an example of a page component.",
          "name": "MyPage",
          "superclass": {
            "name": "HTMLElement"
          },
          "tagName": "my-page",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "MyPage",
          "declaration": {
            "name": "MyPage",
            "module": "src/my-page.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "my-page",
          "declaration": {
            "name": "MyPage",
            "module": "src/my-page.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/traffic-light.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "This web component emulates a U.S. traffic light\nwith red, yellow, and green lights.\nThe `state` attribute specifies the initial state.\nTo advance to the next state, click the component\nor call the next() method on an instance.\nTo get the current state, access the `state` property of an instance.\nIt is intentional that the state cannot be changed by\nmodifying the `state` attribute or setting the `state` property.",
          "name": "TrafficLight",
          "members": [
            {
              "kind": "field",
              "name": "_state",
              "type": {
                "text": "Light"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "stateToDivMap",
              "privacy": "private",
              "default": "new Map()"
            },
            {
              "kind": "field",
              "name": "state"
            },
            {
              "kind": "method",
              "name": "next"
            },
            {
              "kind": "method",
              "name": "change",
              "privacy": "private",
              "parameters": [
                {
                  "name": "on",
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            }
          ],
          "events": [
            {
              "name": "state-change",
              "type": {
                "text": "CustomEvent"
              }
            }
          ],
          "attributes": [
            {
              "type": {
                "text": "Light"
              },
              "description": "The starting state.",
              "name": "state",
              "default": "Light.Stop"
            }
          ],
          "superclass": {
            "name": "HTMLElement"
          },
          "tagName": "traffic-light",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "TrafficLight",
          "declaration": {
            "name": "TrafficLight",
            "module": "src/traffic-light.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "traffic-light",
          "declaration": {
            "name": "TrafficLight",
            "module": "src/traffic-light.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/stories/hello-world.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "meta",
          "type": {
            "text": "Meta<HelloWorld>"
          },
          "default": "{ title: \"Components/HelloWorld\", component: \"hello-world\", args, argTypes, render: (args) => template(args), parameters: { actions: { handles: events, }, }, tags: [\"autodocs\"], }"
        },
        {
          "kind": "variable",
          "name": "Default",
          "type": {
            "text": "Story"
          },
          "default": "{ play: ({ canvasElement }) => { const helloWorld = canvasElement.querySelector(\"hello-world\") as HelloWorld; expect(helloWorld).toBeInTheDocument(); function verifyText(name: string) { const p = helloWorld.shadowRoot?.querySelector(\"p\"); expect(p).toBeInTheDocument(); expect(p).toHaveTextContent(`Hello, ${name}!`); } let name = \"World\"; // The \"name\" attribute is not set yet. verifyText(name); // Set the \"name\" attribute. name = \"Tami\"; helloWorld.setAttribute(\"name\", name); expect(helloWorld).toHaveProperty(\"name\", name); verifyText(name); // Set the \"name\" property. name = \"Comet\"; helloWorld.name = name; expect(helloWorld).toHaveAttribute(\"name\", name); verifyText(name); helloWorld.name = \"World\"; // return to default value }, }"
        },
        {
          "kind": "variable",
          "name": "Named",
          "type": {
            "text": "Story"
          },
          "default": "{ args: { name: \"Mark\" }, }"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "meta",
            "module": "src/stories/hello-world.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Default",
          "declaration": {
            "name": "Default",
            "module": "src/stories/hello-world.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Named",
          "declaration": {
            "name": "Named",
            "module": "src/stories/hello-world.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/stories/my-page.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "meta",
          "type": {
            "text": "Meta<MyPage>"
          },
          "default": "{ title: \"Components/MyPage\", component: \"my-page\", args, argTypes, render: (args) => template(args), }"
        },
        {
          "kind": "variable",
          "name": "Default",
          "type": {
            "text": "Story"
          },
          "default": "{}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "meta",
            "module": "src/stories/my-page.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Default",
          "declaration": {
            "name": "Default",
            "module": "src/stories/my-page.stories.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/stories/traffic-light.stories.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "meta",
          "type": {
            "text": "Meta<TrafficLight>"
          },
          "default": "{ title: \"Components/TrafficLight\", component: \"traffic-light\", args, argTypes, render: (args) => template(args), parameters: { // This should cause \"state-change\" events to be logged to the // Actions tab when the tests are run, but it does not work. actions: { handles: events, }, }, tags: [\"autodocs\"], }"
        },
        {
          "kind": "variable",
          "name": "Default",
          "type": {
            "text": "Story"
          },
          "default": "{ play: ({ canvasElement }) => { const trafficLight = canvasElement.querySelector( \"traffic-light\" ) as TrafficLight; expect(trafficLight).toBeInTheDocument(); // There are two ways to advance to the next state, // calling the next method or clicking the button. trafficLight.next(); expect(trafficLight).toHaveProperty(\"state\", Light.Yield); trafficLight.shadowRoot?.querySelector(\"button\")?.click(); expect(trafficLight).toHaveProperty(\"state\", Light.Go); trafficLight.next(); expect(trafficLight).toHaveProperty(\"state\", Light.Stop); }, }"
        },
        {
          "kind": "variable",
          "name": "Specified",
          "type": {
            "text": "Story"
          },
          "default": "{ args: { state: Light.Go }, // The default render function assumes that the component being tested // has a settable property that corresponds to each args entry. // The traffic-light component does not have a settable \"state\" property, // so we must use a custom render function. render, play: async ({ canvasElement }) => { const trafficLight = canvasElement.querySelector( \"traffic-light\" ) as HTMLElement; expect(trafficLight).toBeInTheDocument(); expect(trafficLight).toHaveProperty(\"state\", Light.Go); trafficLight.click(); expect(trafficLight).toHaveProperty(\"state\", Light.Stop); trafficLight.click(); expect(trafficLight).toHaveProperty(\"state\", Light.Yield); trafficLight.click(); expect(trafficLight).toHaveProperty(\"state\", Light.Go); }, }"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "meta",
            "module": "src/stories/traffic-light.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Default",
          "declaration": {
            "name": "Default",
            "module": "src/stories/traffic-light.stories.ts"
          }
        },
        {
          "kind": "js",
          "name": "Specified",
          "declaration": {
            "name": "Specified",
            "module": "src/stories/traffic-light.stories.ts"
          }
        }
      ]
    }
  ]
}
